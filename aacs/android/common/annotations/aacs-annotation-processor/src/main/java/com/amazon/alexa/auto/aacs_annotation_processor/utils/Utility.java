/*
 * Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
package com.amazon.alexa.auto.aacs_annotation_processor.utils;

import com.squareup.javapoet.JavaFile;

import java.io.IOException;
import java.util.Collection;
import java.util.Set;

import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.PackageElement;
import javax.tools.Diagnostic;

public class Utility {
    /**
     * Provides the package element of the given element
     * @param element
     * @return
     */
    public static PackageElement getPackage(Element element) {
        while (element.getKind() != ElementKind.PACKAGE) {
            element = element.getEnclosingElement();
        }
        return (PackageElement) element;
    }

    /**
     * Returns true if field is not private and not static
     * @param element
     * @return
     */
    public static boolean isFieldAccessible(Element element) {
        Set<Modifier> modifiers = element.getModifiers();
        return !modifiers.contains(Modifier.PRIVATE) && !modifiers.contains(Modifier.STATIC);
    }

    /**
     * Responsible for creating the autogenerated all java files
     * @param javaFiles
     */
    public static void writeFiles(ProcessingEnvironment processingEnv, Collection<JavaFile> javaFiles) {
        for (JavaFile javaFile : javaFiles) {
            writeFile(processingEnv, javaFile);
        }
    }

    /**
     * Responsible for creating the autogenerated java file
     * @param javaFile
     */
    public static void writeFile(ProcessingEnvironment processingEnv, JavaFile javaFile) {
        Filer filer = processingEnv.getFiler();
        try {
            javaFile.writeTo(filer);
        } catch (IOException e) {
            Messager messager = processingEnv.getMessager();
            String message = String.format("Unable to write file: %s", e.getMessage());
            messager.printMessage(Diagnostic.Kind.ERROR, message);
        }
    }
}
