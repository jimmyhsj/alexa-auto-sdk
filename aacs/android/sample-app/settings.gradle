gradle.ext.aacsRoot = System.getenv('AACS_ROOT')
if (gradle.ext.aacsRoot == null || gradle.ext.aacsRoot.isEmpty()) {
    gradle.ext.aacsRoot = new File(rootProject.projectDir, "..").getCanonicalPath()
}

gradle.ext.appComponentsRoot = System.getenv('AACS_APP_COMPONENTS')
if (gradle.ext.appComponentsRoot == null || gradle.ext.appComponentsRoot.isEmpty()) {
    gradle.ext.appComponentsRoot =  new File(rootProject.projectDir, "../app-components").getAbsolutePath()
}

gradle.ext.aarDir = new File(gradle.ext.aacsRoot, "/service/core-service/libs").getAbsolutePath()

// AACS Components
include ':aacs'
project(':aacs').projectDir = new File(gradle.ext.aacsRoot, '/service/core-service')
include ':aacs-extra'
project(':aacs-extra').projectDir = new File(gradle.ext.aacsRoot, '/service/modules/aacs-extra')
include ':aacs-maccandroid'
project(':aacs-maccandroid').projectDir = new File(gradle.ext.aacsRoot, '/service/modules/maccandroid')
include ':aacsconstants'
project(':aacsconstants').projectDir = new File(gradle.ext.aacsRoot, '/common/constants/aacsconstants')
include ':aacs-annotation-api'
project(':aacs-annotation-api').projectDir = new File(gradle.ext.aacsRoot, '/common/annotations/aacs-annotation-api')
include ':aacs-annotation-processor'
project(':aacs-annotation-processor').projectDir = new File(gradle.ext.aacsRoot, '/common/annotations/aacs-annotation-processor')
include ':aacsipc'
project(':aacsipc').projectDir = new File(gradle.ext.aacsRoot, '/common/ipc/aacsipc')
include ':aacscommonutils'
project(':aacscommonutils').projectDir = new File(gradle.ext.aacsRoot, '/common/commonutils/aacscommonutils')
include ':alexa-auto-tts'
project(':alexa-auto-tts').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-tts/aacstts')
include ':alexa-auto-telephony'
project(':alexa-auto-telephony').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-telephony/aacstelephony')
include ':alexa-auto-contacts'
project(':alexa-auto-contacts').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-contacts/aacscontacts')
include ':alexa-auto-carcontrol'
project(':alexa-auto-carcontrol').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-carcontrol/aacscarcontrol')

// AACS Sample App Projects
include ':alexa-auto-apis'
project(':alexa-auto-apis').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-apis')
include ':alexa-auto-lwa-auth'
project(':alexa-auto-lwa-auth').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-lwa-auth')
include ':alexa-auto-setup'
project(':alexa-auto-setup').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-setup')
include ':alexa-auto-media-player'
project(':alexa-auto-media-player').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-media-player')
include ':alexa-auto-app'
project(':alexa-auto-app').projectDir = new File(rootProject.projectDir, '/alexa-auto-app')
include ':alexa-auto-apps-common-util'
project(':alexa-auto-apps-common-util').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-apps-common-util')
include ':alexa-auto-voice-interaction'
project(':alexa-auto-voice-interaction').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-voice-interaction')
include ':alexa-auto-apps-common-ui'
project(':alexa-auto-apps-common-ui').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-apps-common-ui')
include ':alexa-auto-navigation'
project(':alexa-auto-navigation').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-navigation')
include ':alexa-auto-settings'
project(':alexa-auto-settings').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-settings')
include ':alexa-auto-comms-ui'
project(':alexa-auto-comms-ui').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-comms-ui')

if (hasProperty('enabledAPL')){
    include ':alexa-auto-apl-renderer'
    project(':alexa-auto-apl-renderer').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-apl-renderer')
    include ':alexa-auto-apl-renderer:apl-render'
    project(':alexa-auto-apl-renderer:apl-render').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-apl-renderer/modules/apl-render')
}

if (hasProperty('enabledUXRestrictions')) {
    include ':alexa-auto-ux-restrictions'
    project(':alexa-auto-ux-restrictions').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-ux-restrictions')
}

include ':alexa-auto-templateruntime-renderer'
project(':alexa-auto-templateruntime-renderer').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-templateruntime-renderer')
include ':alexa-auto-device-usage'
project(':alexa-auto-device-usage').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-device-usage')
include ':alexa-auto-voice-ui'
project(':alexa-auto-voice-ui').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-voice-ui')

gradle.ext.previewmodecomponent =  new File(rootProject.projectDir, "../app-components/alexa-auto-preview-mode-util").getAbsolutePath()
if (!gradle.ext.previewmodecomponent.isEmpty()) {
    include ':alexa-auto-preview-mode-util'
    project(':alexa-auto-preview-mode-util').projectDir = new File(gradle.ext.appComponentsRoot, '/alexa-auto-preview-mode-util')
}

gradle.ext.extra_module_paths = []

if (getStartParameter().projectProperties.get("extensions") != null) {
    def extra_module_paths_unprocessed = getStartParameter().projectProperties.getOrDefault("extensions","").split(',')
    extra_module_paths_unprocessed.each{
        if (it.contains("~")) {
            gradle.ext.extra_module_paths << it.replaceFirst("^~", System.getProperty("user.home"))
        } else {
            gradle.ext.extra_module_paths << it
        }
    }
} else {
    def extra_modules_folder = new File(rootProject.projectDir, '../../../extensions/extras')
    if (extra_modules_folder.exists()) {
        extra_modules_folder.eachDir {
            gradle.ext.extra_module_paths << new File(extra_modules_folder, it.name).getCanonicalPath()
        }
    }
}

gradle.ext.extra_module_names = []
gradle.ext.extra_module_factory_names = []
gradle.ext.extra_module_project_names = []
gradle.ext.extra_app_component_names = []
gradle.ext.extra_app_component_dependencies = []

for (extra_module_path in gradle.ext.extra_module_paths) {

    def extension_module_factory_folder = new File("${extra_module_path}/aacs/android/modules")
    // Add dependencies on AACS module factories
    if (extension_module_factory_folder.exists()) {
        def extra_module_factory_name = ''
        def folder = new File(extension_module_factory_folder.getAbsolutePath())
        folder.eachDir {
            if (it.name.startsWith('aacs')) {
                extra_module_factory_name = it.name
            }
        }
        include ':' + extra_module_factory_name
        project(':' + extra_module_factory_name).projectDir = new File(extension_module_factory_folder, extra_module_factory_name)
        gradle.ext.extra_module_factory_names << extra_module_factory_name
    }
    // Add dependencies on app components for extensions
    gradle.ext.extramodulecomponent = new File("${extra_module_path}/samples/android-aacs-sample-app/modules")
    if (gradle.ext.extramodulecomponent.exists()) {
        def extram_module_project_name = ''
        def folder = new File(gradle.ext.extramodulecomponent.getAbsolutePath())
        folder.eachDir {
            if (it.name.startsWith('alexa-auto')) {
                extram_module_project_name = it.name
            }
        }
        include ':' + extram_module_project_name
        project(':' + extram_module_project_name).projectDir = new File(gradle.ext.extramodulecomponent, '/' + extram_module_project_name)
        gradle.ext.extra_module_project_names << extram_module_project_name
    }
    // Add dependencies on app components under a different directory for extensions
    gradle.ext.extraappcomponent = new File("${extra_module_path}/aacs/android/app-components")
    if (gradle.ext.extraappcomponent.exists()) {
        def extra_app_component_name = ''
        def folder = new File(gradle.ext.extraappcomponent.getAbsolutePath())
        folder.eachDir {
            if (it.name.startsWith('alexa-auto')) {
                extra_app_component_name = it.name
                include ':' + extra_app_component_name
                def extra_app_component_dir = ''
                // Check if the extra app component has an inner module with the same name to be imported
                def inner_module_dir = new File("${gradle.ext.extraappcomponent}/${extra_app_component_name}/${extra_app_component_name}")
                if (inner_module_dir.exists()) {
                    extra_app_component_dir = inner_module_dir
                }
                else {
                    // If the extra app component directory does not contain an inner module, include the root project directly
                    extra_app_component_dir = new File(gradle.ext.extraappcomponent, '/' + extra_app_component_name)
                }
                project(':' + extra_app_component_name).projectDir = extra_app_component_dir

                gradle.ext.extra_app_component_names << extra_app_component_name

                // Include dependency libs (if any) needed by the extra app component
                def dependency_dir = new File(extra_app_component_dir, 'libs')
                gradle.ext.extra_app_component_dependencies << dependency_dir
            }
        }
    }
}
